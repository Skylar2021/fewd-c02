const Robot = (function() { //this is our factory function
  function Robot(name) {   // here we set up an inner function called robot that has a parameter name
      this.getName = function() { // this refers to calling function and it is appending a getName 
          return name;                      // property with a functions that returns name
      };
  }

  return Robot; // we return the function Robot
}()); // we call the function we assigned to the constant Robot

//now when I say: 
const robbie = new Robot('Robbie'); //we create the new robot
console.log('the robot\'s name is: ' + robbie.getName()); // we see the name
delete robbie.name; // we try to delete the name
console.log('Robot\'s name: ' + robbie.getName() + ' stays private.'); // yet .name is inaccessible from the outside


let obj = (function () {  // clos
  // block scope(privacy, can't be accessed from the outside)
  return {
    // global scope
  }
})